== Routers

Load Balancing / Performance: parallel en concurrent

De volledige(r) sources van dit onderwerp kun je vinden in de subdirectory *exercises/csv* van dit project.

Met 'gradle run' wordt de applicatie uitgevoerd.

=== Handmatig

[source]
----
class PersistorManager extends Actor with ActorLogging {
  var router = {
    val routees = Vector.fill(5) {
      val r = context.actorOf(Props[Persistor])
      context watch r
      ActorRefRoutee(r)
    }
    Router(RoundRobinRoutingLogic(), routees)
  }

  override def receive : Receive = {
    case f: Fields => router.route(f, sender())
    case d: Done => router.route(d, sender())

    case Terminated(a) =>                           // must handle supervision...
      router = router.removeRoutee(a)
      val r = context.actorOf(Props[Persistor])
      context watch r
      router = router.addRoutee(r)
  }
}
----


=== Pool

Geconfigureerd in 'application.conf':

[source]
----
akka {
  actor.deployment {
    /reader/validator/confrouter {
      router = round-robin-pool
      nr-of-instances = 5
    }
  }
}
----

*NB*: let op het path /reader/validator/confrouter! Hierin is *reader* de naam van de eerste Actor, die een
child-actor *validator* maakt. Binnen die actor(ref) *validator* maken we de pool met de naam *confrouter*.

[source]
----
val router = context.actorOf(FromConfig.props(Props[Persistor]), "confrouter")
----

*NB*: confrouter is de naam die we in de 'application.conf' aan het laatste deel van het path van deze pool hebben
gegeven!

Of gecodeerd:

[source]
----
val router = context.actorOf(SmallestMailboxPool(5).props(Props[Persistor]), "router")
----


=== Group

Geconfigureerd in 'application.conf':

[source]
----
/reader/validator/grouprouter {
  router = random-group
  routees.paths = [
    "/user/reader/validator/persistor-1",
    "/user/reader/validator/persistor-2",
    "/user/reader/validator/persistor-3",
    "/user/reader/validator/persistor-4",
    "/user/reader/validator/persistor-5"
  ]
}
----

[source]
----
val router = context.actorOf(FromConfig.props(), "grouprouter")
----

[source]
----
val paths = List("/user/workers/w1", "/user/workers/w2", "/user/workers/w3")
val router = context.actorOf(RandomGroup(paths).props(), "router")
----

=== Aanroep

De aanroep van een router is exact hetzlefde als de aanroep van de actor (ref) zelf!

[source]
----
val worker = context.actorOf(Props[Persistor])

val router = context.actorOf(SmallestMailboxPool(5).props(Props[Persistor]), "router")

worker ! work
router ! work
----

De tweede aanroep heeft tot gevolg dat het werk aan de routee gestuurd wordt die het minste werk
berichten in zijn Mailbox heeft.
